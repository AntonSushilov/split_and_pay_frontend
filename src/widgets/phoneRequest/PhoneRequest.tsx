import { useTelegramData } from "hooks";
import { useAppDispatch } from "hooks/UseAppDispatch";
import { useEffect, useState } from "react";
import { userActions } from "services/user";

export const PhoneRequest = () => {
  const dispatch = useAppDispatch()
  const [canRequestContact, setCanRequestContact] = useState(false);
  const { tg } = useTelegramData();
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä–∏–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –º–µ—Ç–æ–¥
    if (tg?.requestContact) {
      setCanRequestContact(true);
    }
  }, [tg]);

  const handleRequestPhone = () => {
    const tg = window.Telegram?.WebApp;
    if (tg) {
      tg.requestContact?.((success, contactData) => {
        console.log("üì§ –ö–æ–Ω—Ç–∞–∫—Ç –∑–∞–ø—Ä–æ—à–µ–Ω");
        console.log(success, contactData);
        try {
          const parsed = contactData.responseUnsafe;
          console.log("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω:", parsed.contact);
          dispatch(userActions.updatePhoneRequest(parsed.contact));
        } catch (err) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞", err);
          alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–∞");
        }
      });
    }
  };

  return (
    <div className="p-4 text-center">
      {canRequestContact ? (
        <button
          onClick={handleRequestPhone}
          className="bg-blue-500 text-white px-4 py-2 rounded"
        >
          –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        </button>
      ) : (
        <p className="text-sm">
          ‚ö†Ô∏è –≠—Ç–∞ –≤–µ—Ä—Å–∏—è Telegram –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ WebApp.
          {/* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä¬ª</b> –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º. */}
        </p>
      )}
    </div>
  );
};
